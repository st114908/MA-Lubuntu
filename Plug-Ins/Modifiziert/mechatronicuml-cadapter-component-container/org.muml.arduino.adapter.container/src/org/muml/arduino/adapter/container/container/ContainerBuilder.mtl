[comment encoding = UTF-8 /]
[**
 * This module contains one specific templates, that is used to generate the Builder Struct
 * for a given Container for Arduino.
 */]
[module ContainerBuilder('http://www.muml.org/pim/connector/1.0.0',
				'http://www.muml.org/pim/behavior/1.0.0',
				'http://www.muml.org/core/1.0.0',
				'http://www.muml.org/pim/actionlanguage/1.0.0',
				'http://www.muml.org/core/expressions/common/1.0.0',
				'http://www.muml.org/pim/msgtype/1.0.0',
				'http://www.muml.org/pim/types/1.0.0',
				'http://www.muml.org/modelinstance/1.0.0',
				'http://www.muml.org/pim/component/1.0.0',
				'http://www.muml.org/pim/instance/1.0.0',
				'http://www.muml.org/pim/realtimestatechart/1.0.0',
				'http://www.muml.org/psm/1.0.0',
				'http://www.muml.org/psm/muml_container/0.5.0')/]

[import org::muml::c::adapter::componenttype::queries::stringQueries/] 
[import org::muml::c::adapter::componenttype::queries::modelQueries/]
[import org::muml::c::adapter::componenttype::queries::ContainerQueries/]

[import org::muml::c::adapter::container::queries::containerStringQueries/]
[import org::muml::c::adapter::container::container::ContainerCommunication/]
[import org::muml::c::adapter::container::container::local::LocalBuilder/]
[import org::muml::c::adapter::container::container::dds::DDSBuilder /]



[template public generateArduinoBuilderStruct(component:Component)]
/**
*  
* @brief The options a port declares
* @details These options are used in the struct [component.getBuilderStructName()/]
*/ 
struct port_option {
	union {
		struct{
		uint16_T pubID;
		uint16_T subID;
		} local_option;
		struct {
			uint8_T ownAddress;
			uint8_T otherAddress;
		} i2c_option;
		struct {
			char* publishingTopic;
			char* subscriptionTopic;
		} mqtt_option;
	};
};

/**
*  
* @brief The builder struct for the Component Type: [component.getName()/]
* @details This is a realization of the builder pattern, the struct represents a Concrete Builder
*/ 
typedef struct [component.getBuilderStructName()/] {
		uint8_T ID;
		//create Builder Functions for each Port
		[for (port : Port | component.ports)]
			PortStatus [port.name.toUpper()/]; /**< The status of port [port.name/] */
			PortHandle* (*create[port.name.toUpper()/]Handle)(struct [component.getBuilderStructName()/]*, PortHandle*); /**< The builder method to create a PortHandle for port [port.name/] */
			struct port_option [port.name.toUpper()/]_op; /**< The port_option for the PortHandle of port [port.name/] */
		[/for]
		[for (cPort : ContinuousPort | component.ports->filter(ContinuousPort))]
		void (*[getVariableName(cPort)/]AccessFunction) ([cPort.dataType.getTypeName()/]*); /**access function pointer for continuous port */
		/*FIXME add initialize and destroy function pointer*/
		[/for]
}[component.getBuilderStructName()/];

/**
*
*@brief A initializer for the struct [component.getBuilderStructName()/]
*@details Shall be used when creating a struct [component.getBuilderStructName()/] manually
*/
static const [component.getBuilderStructName()/] INIT_BUILDER = { 
	0, 
	[for (port : Port | component.ports) separator (',') ] 
	PORT_DEACTIVATED, 
	NULL, 
	{0,0}
	[/for] 
};
[/template] 
