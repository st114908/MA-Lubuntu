[comment encoding = UTF-8 /]
[**
 * This module contains all templates, that are used to generate the Configuration-files
 * for a given Container.
 */]
[module MqttCommunication('http://www.muml.org/pim/connector/1.0.0',
				'http://www.muml.org/pim/behavior/1.0.0',
				'http://www.muml.org/core/1.0.0',
				'http://www.muml.org/pim/actionlanguage/1.0.0',
				'http://www.muml.org/core/expressions/common/1.0.0',
				'http://www.muml.org/pim/msgtype/1.0.0',
				'http://www.muml.org/pim/types/1.0.0',
				'http://www.muml.org/modelinstance/1.0.0',
				'http://www.muml.org/pim/component/1.0.0',
				'http://www.muml.org/pim/instance/1.0.0',
				'http://www.muml.org/pim/realtimestatechart/1.0.0',
				'http://www.muml.org/psm/1.0.0',
				'http://www.muml.org/psm/muml_container/0.5.0')/]

[import org::muml::c::adapter::container::queries::containerStringQueries /]
[import org::muml::c::adapter::componenttype::queries::stringQueries /]

[query public getMethodNameForMqttPortHandleBuilder(port : Port) : String = 
	'create_' + port.name.toUpper() + 'MqttHandle'
/]

[**
 * Generate the Builder function for an MQTT Port Handle that is applicable to all PortInstanceConfigurations of the given port.
*/]
[template public generateBuilderForMqttPortHandle(port : Port, portInstanceConfigs : Collection(PortInstanceConfiguration_MQTT))]
static PortHandle* [getMethodNameForMqttPortHandleBuilder(port)/]([port.component.getBuilderStructName() /]* b, PortHandle *ptr){
	ptr->type = PORT_HANDLE_TYPE_MQTT;
	[if (port.oclIsKindOf(DiscretePort))]
	//create the handle for the discrete port [port.name.toUpper() /] with all its message types
	MqttHandle* handle = (MqttHandle*) malloc(sizeof(MqttHandle)+[port.oclAsType(DiscretePort).receiverMessageTypes->size()/]*sizeof(MqttSubscriber));
	handle->numOfSubs = [port.oclAsType(DiscretePort).receiverMessageTypes->size()/];
	//register a subscriber for every message type of the port
	[for (messageType : MessageType | port.oclAsType(DiscretePort).receiverMessageTypes)]
		[let j : Integer = i-1 ]
			[let messageBuffer : MessageBuffer = port.oclAsType(DiscretePort).receiverMessageBuffer->select(buffer : MessageBuffer | buffer.messageType->exists(msgT : MessageType | msgT=messageType))->first()]
	initAndRegisterMqttSubscriber(&(handle->subscribers['['/][j/][']'/]),
									b->[port.name.toUpper()/]_op.mqtt_option.subscriptionTopic,
									"[messageType.getName() /]",
									[messageBuffer.bufferSize.value /],
									sizeof([messageType.getMessageType()/]),
									[if messageBuffer.bufferOverflowAvoidanceStrategy=BufferOverflowAvoidanceStrategy::DISCARD_OLDEST_MESSAGE_IN_BUFFER] true [else] false [/if]);	
			[/let]
		[/let]
	[/for]
	[else] [comment if DirectedTypedPort /]
	//create the handle for the DirectedTypedPort [port.name.toUpper() /] that has only 1 data type
	MqttHandle* handle = malloc(sizeof(MqttHandle)+	[if (port.oclAsType(DirectedTypedPort).inPort)]1[else]0[/if]*sizeof(MqttSubscriber));
	handle->numOfSubs = 1;
	//The message ID is 0, the buffer holds 1 item
	initAndRegisterMqttSubscriber(&(handle->subscribers['['/]0[']'/], 
									b->[port.name.toUpper()/]_op.mqtt_option.subscriptionTopic,
									"[port.oclAsType(DirectedTypedPort).dataType.getTypeName()/]", 1, sizeof([port.oclAsType(DirectedTypedPort).dataType.getTypeName()/]), true);
	[/if]
	handle->publishingTopic = b->[port.name.toUpper()/]_op.mqtt_option.publishingTopic;
	handle->subscriptionTopic = b->[port.name.toUpper()/]_op.mqtt_option.subscriptionTopic;
	ptr->concreteHandle = handle;

	return ptr;
}
[/template]

[**
 * Declares the variables that are required for sending messages using MQTT.
*/]
[template public generateDeclarationsForMqttSending()]
MqttHandle* mqttHandle;
[/template]

[**
 * Declares the variables that are required for receiving messages using MQTT.
*/]
[template public generateDeclarationsForMqttReceiving()]
MqttHandle* mqttHandle;
int i;
[/template]

[**
 * Generate the library call for the sending of a message using MQTT for a DiscretePort.
*/]
[template private generateMqttSendingMethod(messageType : MessageType)]
sendMqttMessage(mqttHandle->publishingTopic, "[messageType.getName()/]", (byte*) msg, sizeof([messageType.getMessageType()/])); [comment msg is a pointer that is handed to the method as parameter /]
[/template]

[**
 * Generate the library call for the sending of a message using MQTT for a DirectedTypedPort.
*/]
[template private generateMqttSendingMethod(dataType : DataType)]
sendMqttMessage(mqttHandle->publishingTopic, "[dataType.getTypeName()/]", (byte*) msg, sizeof([dataType.getTypeName()/])); [comment msg is a pointer that is handed to the method as parameter /]
[/template]


[**
 * Generates the sending of a DiscretePort's message via MQTT.
*/]
[template public generateSwitchCaseForMqttSending(portInstanceConfigs : Collection(PortInstanceConfiguration_MQTT), messageType : MessageType)]
[generateCaseAndMqttHandle()/]
	[generateMqttSendingMethod(messageType) /]
	break;
[/template]

[**
 * Generates the sending of a DirectedTypedPort's data via MQTT.
*/]
[template public generateSwitchCaseForMqttSending(portInstanceConfigs : Collection(PortInstanceConfiguration_MQTT), dataType : DataType)]
[generateCaseAndMqttHandle()/]
	[generateMqttSendingMethod(dataType) /]
	break;
[/template]

[**
 * Generates the loop to find the correct subscriber and retrieve its buffer.
*/]
[template private generateFindBufferLoop(messageTypeName : String)]
MessageBuffer* buffer = NULL;
for (i = 0; i < mqttHandle->numOfSubs; i++){
	if (strcmp(mqttHandle->subscribers['['/]i[']'/].messageTypeName, "[messageTypeName /]") == 0){
		buffer = mqttHandle->subscribers['['/]i[']'/].buffer;
		break;
	}
}
[/template]

[**
 * Generates the check if an MQTT message is available for the corresponding DiscretePort.
*/]
[template public generateSwitchCaseForMqttExists(portInstanceConfigs : Collection(PortInstanceConfiguration_MQTT), messageType: MessageType)]
[generateCaseAndMqttHandle()/]
	[generateFindBufferLoop(messageType.getName())/]
	return MessageBuffer_doesMessageExists(buffer);
	break;
[/template]

[**
 * Generates the check if new data of the corresponding DirectedTypedPort is available via MQTT.
*/]
[template public generateSwitchCaseForMqttExists(portInstanceConfigs : Collection(PortInstanceConfiguration_MQTT), dataType : DataType)]
[generateCaseAndMqttHandle()/]
	[generateFindBufferLoop(dataType.getTypeName())/]
	return MessageBuffer_doesMessageExists(buffer);
	break;
[/template]

[**
 * Generates the receiving of a DiscretePort's message using MQTT.
*/]
[template public generateSwitchCaseForMqttReceiving(portInstanceConfigs : Collection(PortInstanceConfiguration_MQTT), messageType : MessageType)]
[generateCaseAndMqttHandle()/]
	[generateFindBufferLoop(messageType.getName()) /]
	return MessageBuffer_dequeue(buffer, msg); [comment msg is a pointer that is handed to the method as parameter /]
	break;
[/template]

[**
 * Generates the receiving of a DirectedTypedPort's data using MQTT.
*/]
[template public generateSwitchCaseForMqttReceiving(portInstanceConfigs : Collection(PortInstanceConfiguration_MQTT), dataType : DataType)]
[generateCaseAndMqttHandle()/]
	[generateFindBufferLoop(dataType.getTypeName())/]
	return MessageBuffer_dequeue(buffer, msg); [comment msg is a pointer that is handed to the method as parameter /]
	break;
[/template]

[**
 * Generates the case statement for MQTT ports and the corresponding PortHandle.
*/]
[template private generateCaseAndMqttHandle()]
case PORT_HANDLE_TYPE_MQTT:
	mqttHandle = (MqttHandle*) port->handle->concreteHandle;
[/template]