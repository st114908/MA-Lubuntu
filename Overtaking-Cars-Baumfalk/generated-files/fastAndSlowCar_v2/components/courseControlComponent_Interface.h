	/**
 * @file 
 * @author generated by Fraunhofer IEM
 * @brief Specification of Component of Type: CourseControl
 * @details This files contains a description of the CourseControl in form of the CourseControlComponent
 * 			and all methods which can be executed on an Instance of this Component
 */
		#ifndef COURSECONTROLCOMPONENT_Interface_H_
		#define COURSECONTROLCOMPONENT_Interface_H_

#ifdef __cplusplus
  extern "C" {
#endif		// Library
	#include "../types/standardTypes.h"
	#include "../types/customTypes.h"
	#include "../lib/port.h"
		#include "../messages/messages_types.h"
	#include "../lib/clock.h"
	#include "../lib/Debug.h"


		

	//include Operation Repositories
			#include "../operations/robotCarDriveControllerOpRep.h"




		//#include "../continuousComponents/contImplementations.h"	

		//#include "../RTSCs/courseControlCourseControlComponentStateChart.h"
			/*****
 			 *
 			 *  Forward Delcaration of Container Functions
 			 *
 			 */		
					void MCC_CourseControlComponent_courseControl_send_OvertakingPermissionMessagesRequestPermission_OvertakingPermissionMessages_Message(Port* p, OvertakingPermissionMessagesRequestPermission_OvertakingPermissionMessages_Message* msg);
					void MCC_CourseControlComponent_courseControl_send_OvertakingPermissionMessagesExecutedOvertaking_OvertakingPermissionMessages_Message(Port* p, OvertakingPermissionMessagesExecutedOvertaking_OvertakingPermissionMessages_Message* msg);
					bool_T MCC_CourseControlComponent_courseControl_recv_OvertakingPermissionMessagesGrantPermission_OvertakingPermissionMessages_Message(Port* p, OvertakingPermissionMessagesGrantPermission_OvertakingPermissionMessages_Message* msg);
					bool_T MCC_CourseControlComponent_courseControl_exists_OvertakingPermissionMessagesGrantPermission_OvertakingPermissionMessages_Message(Port* p);
					bool_T MCC_CourseControlComponent_courseControl_recv_OvertakingPermissionMessagesDenyPermission_OvertakingPermissionMessages_Message(Port* p, OvertakingPermissionMessagesDenyPermission_OvertakingPermissionMessages_Message* msg);
					bool_T MCC_CourseControlComponent_courseControl_exists_OvertakingPermissionMessagesDenyPermission_OvertakingPermissionMessages_Message(Port* p);
			
					bool_T MCC_CourseControlComponent_frontDistance_recv_value(Port* p, int32_T* value);
					bool_T MCC_CourseControlComponent_frontDistance_exists_value(Port* p);
					bool_T MCC_CourseControlComponent_rearDistance_recv_value(Port* p, int32_T* value);
					bool_T MCC_CourseControlComponent_rearDistance_exists_value(Port* p);
						void MCC_CourseControlComponent_velocity_send_value(Port* p, int16_T* value);
						void MCC_CourseControlComponent_angle_send_value(Port* p, int8_T* value);
			
			
	
			/*****
 			 *
 			 *  Component Functions
 			 *
 			 */
			/**
			 * @file 
			 * @author generated by Fraunhofer IEM 
			 * @brief Specification of Component of Type: CourseControl
			 * @details This files contains a description of the CourseControl in form of the CourseControlComponent
			 * 			and all methods which can be executed on an Instance of this Component
			 */
				
						/**
						 * @brief Forward Declaration of the struct CourseControlCourseControlComponentStateChart which describes the behavior of CourseControlComponent
						 * 
						 */
						 typedef struct CourseControlCourseControlComponentStateChart CourseControlCourseControlComponentStateChart;
						/**
						 * @brief Forward Declaration of the struct CourseControlComponent
						 */
							typedef struct CourseControlComponent CourseControlComponent;
						
						/**
						*  
						* @brief Description for a ComponentInstance of Type: CourseControl
						* @details This struct describes a specific Component Instances which is typed over the Component: CourseControl
						*/
						struct CourseControlComponent {
						
								uint8_T ID;	
						
						
									CourseControlCourseControlComponentStateChart* stateChart;	/**< The CourseControlCourseControlComponentStateChart of the Component CourseControl */
							
										Port frontDistancePort; /**< A  Component's Port: frontDistance */
										Port rearDistancePort; /**< A  Component's Port: rearDistance */
										Port courseControlPort; /**< A  Component's Port: courseControl */
										Port velocityPort; /**< A  Component's Port: velocity */
										Port anglePort; /**< A  Component's Port: angle */
										Clock frontDistancePortClock; /**< A  Hybrid/ Continuous Port's Clock: frontDistancePortClock */
										Clock rearDistancePortClock; /**< A  Hybrid/ Continuous Port's Clock: rearDistancePortClock */
										Clock velocityPortClock; /**< A  Hybrid/ Continuous Port's Clock: velocityPortClock */
										Clock anglePortClock; /**< A  Hybrid/ Continuous Port's Clock: anglePortClock */
								
						
								
								
						
								CourseControlComponent * next;/**< A Pointer to the next component part, if this component ist part of a multipart in the CIC */
								
							};
					
						/**
						* @brief This Methodes intializes the Component: CourseControl
						* @details All struct members of the struct CourseControlComponent are initialized
						* 
						* @param component The CourseControlComponent to be initialized
						*/	
							void CourseControlComponent_initialize(CourseControlComponent* component);
				
						/**
						* @brief Creates a Instance of the Component: CourseControl
						* @details Allocates Memory for the struct CourseControlComponent
						* @return A Pointer to the new created CourseControlComponent
						*/
							CourseControlComponent CourseControlComponent_create();
				
						/**
						 * @brief Destroys a Component: CourseControl
						 * @details Frees the Memory for the struct CourseControlComponent
						 * 
						* @param component The specific CourseControlComponent to be destroyed
						 */
							void CourseControlComponent_destroy(CourseControlComponent* component);
						
						/**
						* @brief Executes the next Step of the behavior an Instance of the Component: CourseControl
						* @details The behavior of the Component:  CourseControl is executed.
						*			
						* @param component The CourseControlComponent whose behavior shall be checked
						*/
							void CourseControlComponent_processStep(CourseControlComponent* component);
				
			
			
			
			
						/*Getter and Setter for Sending Values of Hybrid/Continuous ports*/
								bool_T getterOf_frontDistance(Port* frontDistancePort, int32_T* frontDistance);/**< A Pointer to the getter function of the port: frontDistance */
								bool_T getterOf_rearDistance(Port* rearDistancePort, int32_T* rearDistance);/**< A Pointer to the getter function of the port: rearDistance */
									void setterOf_velocity(Port* velocityPort, int16_T* velocity);/**< A Pointer to the setter function of the port: velocity */
									void setterOf_angle(Port* anglePort, int8_T* angle);/**< A Pointer to the setter function of the port: angle */
								CourseControlCourseControlComponentStateChart* CourseControlComponent_getStateMachine(CourseControlComponent* component);
						
						/**
								 * @brief Get the Port: courseControl of an Instance of the Component: CourseControl
								 * @details The Pointer CourseControlComponent::courseControlPort is returned
								 * 
								 * @param component The specific Instance CourseControlComponent  of the Component: CourseControl whose Port shall be returned
								 * @return A Pointer to the Port courseControl of the struct CourseControlComponent
								 */
								Port* CourseControlComponent_getcourseControl(CourseControlComponent* component);
					
						
		

	
	
			/*****
 			 *
 			 *  RealtimeStatechart Functions
 			 *
 			 */
			/**
			 * @file 
			 * @author generated by Fraunhofer IEM
			 * @brief Specification of Realtime-StateChart: CourseControlCourseControlComponent
			 * @details This files contains the description of the Realtime-StateChart: CourseControlCourseControlComponent and its behavior which is executed
			 */
			
			//ENUM
				/** 
				 * @brief This enum represents the States of the Realtime-StateChart: CourseControlCourseControlComponent
				 */
					typedef enum {
						COURSECONTROLCOURSECONTROLCOMPONENT_INACTIVE,
						STATE_COURSECONTROLCOURSECONTROL_MAIN /**< Represents the State: STATE_COURSECONTROLCOURSECONTROL_MAIN of the Realtime-StateChart: CourseControlCourseControlComponent */
						,
								STATE_COURSECONTROLCOURSECONTROLAUTONOMOUSDRIVING /**< Represents the State: STATE_COURSECONTROLCOURSECONTROLAUTONOMOUSDRIVING of the Realtime-StateChart: CourseControlCourseControlCourseControlPort */
						,		STATE_COURSECONTROLCOURSECONTROLWAITFORPERMISSION /**< Represents the State: STATE_COURSECONTROLCOURSECONTROLWAITFORPERMISSION of the Realtime-StateChart: CourseControlCourseControlCourseControlPort */
						,		STATE_COURSECONTROLCOURSECONTROLOVERTAKING /**< Represents the State: STATE_COURSECONTROLCOURSECONTROLOVERTAKING of the Realtime-StateChart: CourseControlCourseControlCourseControlPort */
						,		STATE_COURSECONTROLCOURSECONTROL_MAINDRIVINGFOLLOWMAINLANE /**< Represents the State: STATE_COURSECONTROLCOURSECONTROL_MAINDRIVINGFOLLOWMAINLANE of the Realtime-StateChart: CourseControlCourseControl_mainDriving */
						,		STATE_COURSECONTROLCOURSECONTROL_MAINDRIVINGPASSSLOWERVEHICLE /**< Represents the State: STATE_COURSECONTROLCOURSECONTROL_MAINDRIVINGPASSSLOWERVEHICLE of the Realtime-StateChart: CourseControlCourseControl_mainDriving */
						,		STATE_COURSECONTROLCOURSECONTROL_MAINDRIVINGCOMPLETEOVERTAKING /**< Represents the State: STATE_COURSECONTROLCOURSECONTROL_MAINDRIVINGCOMPLETEOVERTAKING of the Realtime-StateChart: CourseControlCourseControl_mainDriving */	
					}CourseControlCourseControlComponentState;
				
				
					/**
					 * 
					 * @brief Description of the Realtime-StateChart: CourseControlCourseControlComponent
					 * @details This struct represents the  Realtime-StateChart: CourseControlCourseControlComponent and its States
					 */
				struct CourseControlCourseControlComponentStateChart {	
						CourseControlComponent * parentComponent;/**< A pointer to the parent ComponentInstance of Type: CourseControlComponent , which has this Realtime-StateChart as its behavior */			
				
				
									CourseControlCourseControlComponentState currentStateOfCourseControlCourseControlComponent;/**< The current State of the Realtime-StateChart: CourseControlCourseControlComponent */
				
							CourseControlCourseControlComponentState currentStateOfCourseControlCourseControlCourseControlPort;/**< Represents the state of region: CourseControlCourseControlCourseControlPort */
							CourseControlCourseControlComponentState currentStateOfCourseControlCourseControl_mainDriving;/**< Represents the state of region: CourseControlCourseControl_mainDriving */
				
						bool_t CourseControlCourseControlComponent_isExecutable;/**< Execution Verifier of RTSC: CourseControlCourseControlComponent. This variable is used to ensure that a RTSC is executed only once per execution cycle */
							bool_t CourseControlCourseControlCourseControlPort_isExecutable;/**< Execution Verifier of RTSC: CourseControlCourseControlCourseControlPort. This variable is used to ensure that a RTSC is executed only once per execution cycle */
							bool_t CourseControlCourseControl_mainDriving_isExecutable;/**< Execution Verifier of RTSC: CourseControlCourseControl_mainDriving. This variable is used to ensure that a RTSC is executed only once per execution cycle */
					
				
				
				
							Clock sTATE_COURSECONTROLCOURSECONTROL_MAINDRIVINGFOLLOWMAINLANEDoClock;/**< Clock for doEvent for state STATE_COURSECONTROLCOURSECONTROL_MAINDRIVINGFOLLOWMAINLANE */
				
							Clock sTATE_COURSECONTROLCOURSECONTROL_MAINDRIVINGPASSSLOWERVEHICLEDoClock;/**< Clock for doEvent for state STATE_COURSECONTROLCOURSECONTROL_MAINDRIVINGPASSSLOWERVEHICLE */
				
							Clock sTATE_COURSECONTROLCOURSECONTROL_MAINDRIVINGCOMPLETEOVERTAKINGDoClock;/**< Clock for doEvent for state STATE_COURSECONTROLCOURSECONTROL_MAINDRIVINGCOMPLETEOVERTAKING */
					
				
							int32_T distanceLimit; /**< The Realtime-StateChart Variable: distanceLimit of Type: int32; */
							int32_T desiredVelocity; /**< The Realtime-StateChart Variable: desiredVelocity of Type: int32; */
							double_T slowVelocity; /**< The Realtime-StateChart Variable: slowVelocity of Type: double; */
							int32_T laneDistance; /**< The Realtime-StateChart Variable: laneDistance of Type: int32; */
				
								int32_T frontDistance;
								int32_T rearDistance;
								int16_T velocity;
								int8_T angle;
				
				
						
				
					} ;
			
			//METHOD STUBS
				/**
				 * @brief Creates an Instance of the Realtime-StateChart: CourseControlCourseControlComponent
				 * @details Allocates Memory for the struct CourseControlCourseControlComponentStateChart
				 * 
				 * @param parentComponent An Instance of the Component: CourseControlComponent which behavior is described via this Realtime-StateChart
				 * @return A Pointer to the new created CourseControlCourseControlComponentStateChart
				 */
					CourseControlCourseControlComponentStateChart* CourseControlCourseControlComponentStateChart_create(CourseControlComponent* parentComponent);
				/**
				 * @brief Initializes an Instance of the Realtime-StateChart: CourseControlCourseControlComponent
				 * @details All struct members of the struct CourseControlCourseControlComponentStateChart are initialized,
				 *			and all Regions of the Realtime-StateChart are initialized, too.
				 * 
				 * @param rtsc The specific CourseControlCourseControlComponentStateChart to be initialized
				 */
					void CourseControlCourseControlComponentStateChart_initialize(CourseControlCourseControlComponentStateChart* rtsc);
				/**
				 * @brief Initializes the Region: CourseControlCourseControlCourseControlPort of the Realtime-StateChart: CourseControlCourseControlComponent
				 * @details The Member CourseControlCourseControlComponentStateChart::currentStateOfCourseControlCourseControlCourseControlPort is initialized
				 * 
				 * @param stateChart The specific CourseControlCourseControlComponentStateChart whose Region shall be initialized
				 */
				
					void initializeCourseControlCourseControlCourseControlPortRegion(CourseControlCourseControlComponentStateChart* stateChart);
				/**
				 * @brief Initializes the Region: CourseControlCourseControl_mainDriving of the Realtime-StateChart: CourseControlCourseControlComponent
				 * @details The Member CourseControlCourseControlComponentStateChart::currentStateOfCourseControlCourseControl_mainDriving is initialized
				 * 
				 * @param stateChart The specific CourseControlCourseControlComponentStateChart whose Region shall be initialized
				 */
				
					void initializeCourseControlCourseControl_mainDrivingRegion(CourseControlCourseControlComponentStateChart* stateChart);
				/**
				 * @brief Destroys the Realtime-StateChart: CourseControlCourseControlComponent
				 * @details Frees the Memory for the struct CourseControlCourseControlComponentStateChart
				 * 
				 * @param rtsc The specific CourseControlCourseControlComponentStateChart to be destroyed
				 */	
					void CourseControlCourseControlComponentStateChart_destroy(CourseControlCourseControlComponentStateChart* rtsc);		
				/**
				 * @brief Executes the next Step of the Realtime-StateChart: CourseControlCourseControlComponent
				 * 
				 * @param rtsc The specific CourseControlCourseControlComponentStateChart to be executed
				 */	
					void CourseControlCourseControlComponentStateChart_processStep(CourseControlCourseControlComponentStateChart* rtsc);
			
				/**
				 * @brief Leaves the Region: driving of the Realtime-StateChart: CourseControlCourseControlComponent
				 * @details This method is called, whenever a the Region: driving is left.
				 * 			The correct State is set and all Exit-Events are executed.
				 *
				 * @param rtsc The specific CourseControlCourseControlComponentStateChart whose Region: driving shall be exit
				 */
					void CourseControlCourseControl_mainDrivingStateChart_exit(CourseControlCourseControlComponentStateChart* rtsc);
				/**
				 * @brief Leaves the Region: courseControlPort of the Realtime-StateChart: CourseControlCourseControlComponent
				 * @details This method is called, whenever a the Region: courseControlPort is left.
				 * 			The correct State is set and all Exit-Events are executed.
				 *
				 * @param rtsc The specific CourseControlCourseControlComponentStateChart whose Region: courseControlPort shall be exit
				 */
					void CourseControlCourseControlCourseControlPortStateChart_exit(CourseControlCourseControlComponentStateChart* rtsc);
						
				/**
				 * @brief Returns wether the Realtime-StateChart: CourseControlCourseControlComponent is in a specific State
				 * 
				 * @param rtsc The specific Realtime-StateChart: CourseControlCourseControlComponentStateChart
				 * @param state One of the States of the Enum: CourseControlCourseControlComponentState
				 * 
				 * @return True, If the Realtime-StateChart is in the specific State, otherwise False
				 */	
					bool_t CourseControlCourseControlComponentStateChart_isInState(CourseControlCourseControlComponentStateChart* rtsc, CourseControlCourseControlComponentState state);





#ifdef __cplusplus
  }
#endif
		#endif /* COURSECONTROLCOMPONENT_Interface_H_ */
